import { Injectable } from '@angular/core';
import { Article } from '../classes/article';
import { BehaviorSubject, Observable, Subject, Subscriber } from 'rxjs';
import { of } from 'rxjs/observable/of';

@Injectable()
export class CartService {

  private itemsInCartSubject: BehaviorSubject<Article[]> = new BehaviorSubject([]);
  private itemsInCart: Article[] = [];
  private dbContentTable: any = []; // Variable used to send data to database
  private dbContentTable2 = new BehaviorSubject<any>([]);
  public dbContentStatus = this.dbContentTable2.asObservable();

  constructor() {
    // Subscription to the array (We use _ by convention)
    this.itemsInCartSubject.subscribe(_ => this.itemsInCart = _);
  }

  /**
   * This add a new article to cart or add items to article already
   * existent in cart.
   * @param item Object Article
   */
  public addToCart(item: Article) {
    const currentItems = [...this.itemsInCart];

    // Preparing the dbContentTable variable with the id_articulo & cantidad fields (id_pedido is autogenerated)
    const index = currentItems.findIndex(matchedItem => matchedItem.id_articulo === item.id_articulo);
    if (index != null) {
      if (index == -1) {
        //If is the first one, add the item
        this.dbContentTable.push([item, 1]);
      } else {
        for (let object of this.dbContentTable) {
          //If already exist, just add one
          if (object[0].id_articulo == item.id_articulo) {
            object[1] += 1;
          }
        }
      }
    }
    // Use of the spread operator in a push case (https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Spread_operator)
    this.itemsInCartSubject.next([...this.itemsInCart, item]);
    // console.log("service dbContenTable "+this.dbContentTable);
    this.dbContentTable2.next(this.dbContentTable);
    // console.log("service dbContentTable2 "+this.dbContentTable2);
  }
  /**
   * This returns items in cart
   */
  public getItems(): Observable<Article[]> {
    return this.itemsInCartSubject;
  }
  /**
   * This remove articles from cart
   * @param item Object Article
   */
  public removeFromCart(item: Article) {
    const currentItems = [...this.itemsInCart];
    // As we can have several items with same id we cant just filter so we remove the first match in array by splice method
    const index = currentItems.findIndex(matchedItem => matchedItem.id_articulo === item.id_articulo);
    for (let object of this.dbContentTable) {
      if (object[0].id_articulo == item.id_articulo) {
        object[1] -= 1;
      }
    }
    // Remove from cart
    currentItems.splice(index, 1);
    this.itemsInCartSubject.next(currentItems);
    this.dbContentTable2 = Object.assign({}, this.dbContentTable);
  }

}
